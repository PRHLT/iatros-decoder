# - Find Perl libraries
# This module finds if PERL is installed and determines where the include files
# and libraries are. It also determines what the name of the library is. This
# code sets the following variables:
#
#  PERL_INCLUDE_PATH = path to where perl.h is found
#  PERL_EXECUTABLE   = full path to the perl binary
#  PERL_LIBRARY      = perl library 
#

SET(PERL_POSSIBLE_INCLUDE_PATHS
  /usr/lib/perl/5.6/CORE
  /usr/lib/perl/5.8/CORE
  /usr/lib/perl/5.10/CORE
  c:/strawberry/perl/lib/CORE
  )

SET(PERL_POSSIBLE_LIB_PATHS /usr/lib)

FIND_PATH(PERL_INCLUDE_PATH perl.h ${PERL_POSSIBLE_INCLUDE_PATHS})


FIND_PROGRAM(PERL_EXECUTABLE perl)

IF(PERL_EXECUTABLE)
  EXEC_PROGRAM(${PERL_EXECUTABLE}
    ARGS -e "'use Config; print \$Config{libperl}, \"\\n\"'"
    OUTPUT_VARIABLE PERL_LIBRARY_OUTPUT_VARIABLE
    RETURN_VALUE PERL_LIBRARY_RETURN_VALUE
    )
  STRING(REGEX REPLACE "^lib([^.]+)\\..*$" "\\1" PERL_LIB "${PERL_LIBRARY_OUTPUT_VARIABLE}")
  SET(PERL_LIB ${PERL_LIB})

  IF(NOT PERL_LIBRARY_RETURN_VALUE)
    FOREACH(path ${PERL_POSSIBLE_LIB_PATHS})
      SET(PERL_POSSIBLE_LIBRARY_NAME ${PERL_POSSIBLE_LIBRARY_NAME} "${path}/${PERL_LIBRARY_OUTPUT_VARIABLE}")
    ENDFOREACH(path ${PERL_POSSIBLE_LIB_PATHS})
  ENDIF(NOT PERL_LIBRARY_RETURN_VALUE)
  EXEC_PROGRAM(${PERL_EXECUTABLE}
    ARGS -e "'use Config; print \$Config{cppflags}, \"\\n\"'"
    OUTPUT_VARIABLE PERL_CPPFLAGS_OUTPUT_VARIABLE
    RETURN_VALUE PERL_CPPFLAGS_RETURN_VALUE
    )
  IF(NOT PERL_CPPFLAGS_RETURN_VALUE)
    SET(PERL_EXTRA_C_FLAGS ${PERL_CPPFLAGS_OUTPUT_VARIABLE})
  ENDIF(NOT PERL_CPPFLAGS_RETURN_VALUE)

  EXECUTE_PROCESS(COMMAND ${PERL_EXECUTABLE} -MExtUtils::Embed -e ccopts
    OUTPUT_VARIABLE PERL_CPPFLAGS_OUTPUT_VARIABLE
    ERROR_VARIABLE PERL_CPPFLAGS_ERROR_VARIABLE
    RESULT_VARIABLE PERL_CPPFLAGS_RETURN_VALUE
    )
  IF(NOT PERL_CPPFLAGS_RETURN_VALUE)
    STRING(REGEX REPLACE "\\\n" " " PERL_EXTRA_C_FLAGS "${PERL_CPPFLAGS_OUTPUT_VARIABLE}")
    SET(PERL_EXTRA_C_FLAGS "${PERL_EXTRA_C_FLAGS} ${PERL_EXTRA_C_FLAGS}")
  ENDIF(NOT PERL_CPPFLAGS_RETURN_VALUE)
  #message(STATUS "PERL_EXTRA_C_FLAGS = ${PERL_EXTRA_C_FLAGS}")

  EXECUTE_PROCESS(COMMAND ${PERL_EXECUTABLE} -MExtUtils::Embed -e ldopts
    OUTPUT_VARIABLE PERL_LDFLAGS_OUTPUT_VARIABLE
    ERROR_VARIABLE PERL_LDFLAGS_ERROR_VARIABLE
    RESULT_VARIABLE PERL_LDFLAGS_RETURN_VALUE
    )
  IF(NOT PERL_LDFLAGS_RETURN_VALUE)
    STRING(REGEX REPLACE "\\\n" " " PERL_EXTRA_LINK_FLAGS "${PERL_LDFLAGS_OUTPUT_VARIABLE}")
    SET(PERL_EXTRA_LINK_FLAGS "${PERL_EXTRA_LINK_FLAGS} -L${PERL_INCLUDE_PATH}")
  ENDIF(NOT PERL_LDFLAGS_RETURN_VALUE)
  #message(STATUS "PERL_EXTRA_LINK_FLAGS = ${PERL_EXTRA_LINK_FLAGS}")
  
  STRING(REGEX REPLACE ".* ([^ ]+DynaLoader[^ ]+).*" "\\1" DYNALOADER_LIB "${PERL_EXTRA_LINK_FLAGS}")
  SET(PERL_LIB "${PERL_LIB} ${DYNALOADER_LIB}")
ENDIF(PERL_EXECUTABLE)

FIND_LIBRARY(PERL_LIBRARY
  NAMES ${PERL_POSSIBLE_LIBRARY_NAME} perl perl5.6 perl5.8 perl5.10
  PATHS ${PERL_POSSIBLE_LIB_PATHS}
  )

# handle the QUIETLY and REQUIRED arguments and set PERLLIBS_FOUND to TRUE if 
# all listed variables are TRUE
INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(PerlLibs DEFAULT_MSG PERL_LIBRARY PERL_INCLUDE_PATH)
if(PERL_LIBRARY)
  set(HAVE_PERL TRUE)
  include_directories(${PERL_INCLUDE_PATH})
endif(PERL_LIBRARY)


MARK_AS_ADVANCED(
  PERL_INCLUDE_PATH
  PERL_EXECUTABLE
  PERL_LIBRARY
  HAVE_PERL
  )
