Basic instructions to work in this project
------------------------------------------

SVN - Subversion Version Control System
---------------------------------------

To download the latest version from the repository:
svn checkout https://projects.iti.upv.es/svn/prhlt/software/cmake

The most important commands are:
svn update            -> update local data with server data 
svn commit            -> commit changes to server 

More info: http://subversion.tigris.org/ 


Git - Fast Version Control System (advanced users)
--------------------------------------------------

Git can be used to work with svn. The main advantage is that
local commit can be made without modifying the svn status.
Local commits prevent the svn to be in an inconsistent state,
although later may cause more merging conflicts if the commit
to the main svn repository is long delayed.
Other advantages are out of topic in this document.

To download the latest version from the repository:
git svn clone https://projects.iti.upv.es/svn/prhlt/software/cmake

The most important commands are:
git commit -a         -> to do a local commit 
git svn rebase        -> update local data with server data 
git svn dcommit       -> commit changes to server 

More info: Git for svn users at http://git.or.cz/course/svn.html
           http://www.kernel.org/pub/software/scm/git/docs/git-svn.html


CMake - Cross Platform Make
---------------------------

It is advisable to make a new directory called 'build'
were all build files will reside. Follow these instructions
to compile:
> cd build
> cmake .. -DCMAKE_BUILD_TYPE=debug
or
> cmake .. -DCMAKE_BUILD_TYPE=release
or
> cmake .. -DCMAKE_BUILD_TYPE=test
depending on which kind of build you are interested in.
The 'test' option compiles the project with coverage enabled.
> make
for a normal compilation or
> make VERBOSE=1
if you want a detailed output.
Then, you can run
> make test
to ensure that the project is rightly build.

Note: in the following sections, additional cmake parameters
will be presented. It is important to note that these 
parameters are additive so to make a release compilation
with documentation enabled the command would be:
> cmake .. -DCMAKE_BUILD_TYPE=release -DBUILD_DOCUMENTATION=ON


Enable and disable features
---------------------------
To enable or disable features in the build process, use the 
flags -DENABLE_FEATURE=on or -DDISABLE_FEATURE=on respectively.


Documentation
-------------

The documentation is generated by Doxygen. In order to do
so, do the following steps:
> cd build
> cmake .. -DBUILD_DOCUMENTATION=ON
> make doc
The documentation will be stored in the doc subdirectory.


Eclipse
-------

Recent versions of CMake allow the creation of Eclipse projects.
This process has some glitches, but for the setup explained in
above sections these can be fixed. The following instructions
are known to work in Eclipse 3.4 (Ganimedes) with CDT 5.0.1.
For previous versions, satisfactory results are not guarrantied.
> cd build
> cmake .. -G"Eclipse CDT4 - Unix Makefiles" -DECLIPSE_CDT4_GENERATE_SOURCE_PROJECT=TRUE
> mv .cproject .project ..
> cd ..

Now edit .cproject. Just below 
<storageModule moduleId="org.eclipse.cdt.core.pathentry">
remove all entries that look like this:
<pathentry kind="src" path="directory"/>

Edit .project. At the top of the file, change <name>myapp@build</name> to
<name>myapp</name>. At the end of the file, remove the complete sub-tree
<linkedResources> </linkedResources>.

These instructions are based on:
http://www.cmake.org/pipermail/cmake/2007-October/016993.html


Distribution
------------
Packages with source and/or binary files can be generated with a CMake feature
called CPack. To generate the packages follow these instructions: 
> cd build
> make package_source       # creates a tar.gz with the sources 
> make iAtros_deb           # creates a .deb with the binaries 
> make iAtros_rpm           # creates a .rpm with the binaries 
